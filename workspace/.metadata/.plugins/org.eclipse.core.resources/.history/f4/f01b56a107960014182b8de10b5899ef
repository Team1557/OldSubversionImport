
package org.usfirst.frc.team1557.robot;

import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.interfaces.Accelerometer.Range;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	Servo servoOne;
	Joystick mainJoy;
	BuiltInAccelerometer BA;
	
	Command start;

	public void robotInit() {
		
		BA = new BuiltInAccelerometer(Range.k2G);
		
		System.out.println("Test pls");
		mainJoy = new Joystick(0);
		servoOne = new Servo(0);
	
		start = new Command() {
			
			@Override
			protected boolean isFinished() {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			protected void interrupted() {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			protected void initialize() {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			protected void execute() {
				
				
			}
			
			@Override
			protected void end() {
				// TODO Auto-generated method stub
				
			}
		};
		
	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		

	}
	
	@Override
	public void teleopInit() {
		//command.start();
	}
	
	// V * T + po0 = po1
	int ticks = 0;
	int count = 0;
	double averageX = 0;
	double averageY = 0;
	double averageZ = 0;
	boolean logic = false;
	
	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
        //Scheduler.getInstance().run();
        
        
		
		
		
		ticks++;
		
		

		//if (Math.abs(x) > .01 && Math.abs(y) > .01 && Math.abs(z - 1) > .01) {
//		if (ticks > 3) {
//			ticks = 0;
//			System.out.printf("X: %8.4f, Y: %8.4f, Z: %8.4f%n", BA.getX(), BA.getY(), BA.getZ() );
//		}

		servoOne.set((mainJoy.getRawAxis(0) + 1) / 2);
		//servoOne.setAngle(Math.atan2(mainJoy.getX(), mainJoy.getY()) * (360.0 / Math.PI));

		if(count < 20){
			double x = BA.getX(),
					y = BA.getY(),
					z = BA.getZ();
			averageX += x;
			averageY += y;
			averageZ += z;	
			count++;
			if(count == 20){
				averageX /= 20;
				averageY /= 20;
				averageZ /= 20;
				logic = !logic;
			}

		}else if(logic){
			System.out.printf("X: %8.4f, Y: %8.4f, Z: %8.4f%n", averageX, averageY,averageZ);
			logic = !logic;
		}


	}
	

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {

	}

}
